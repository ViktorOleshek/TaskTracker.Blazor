@page "/register"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Domain.Models.Account
@using Services.Abstraction
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@using MudBlazor

<div class="row">
	<div class="ma-6 d-flex justify-center">
		<MudCard Width="500px">
			<MudCardHeader>
				<MudText Typo="Typo.h5">Account Registration</MudText>
			</MudCardHeader>

			<MudForm Model="model" Validation="registerModelValidation.ValidateValue">
				<MudCardContent>
					<MudTextField @bind-Value="model.Login" For="@(() => model.Login)" Immediate="true" Label="Fullname" Required="true"></MudTextField>
					<MudTextField @bind-Value="model.Email" For="@(() => model.Email)" Immediate="true" Label="Email Address" InputType="InputType.Email" Required="true"></MudTextField>
					<MudTextField @bind-Value="model.Password" For="@(() => model.Password)" Immediate="true" Label="Password" InputType="InputType.Password" Required="true"></MudTextField>
					<MudTextField @bind-Value="model.ConfirmPassword" For="@(() => model.ConfirmPassword)" Immediate="true" Label="Confirm Password" InputType="InputType.Password" Required="true"></MudTextField>
				</MudCardContent>

				<MudCardActions>
					<MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" ButtonType="ButtonType.Button" OnClick="HandleRegister" Disabled="isSubmitting">
						@if (isSubmitting)
						{
							<MudProgressCircular Size="Size.Small" Indeterminate="true" />
						}
						else
						{
							<text>Register</text>
						}
					</MudButton>
				</MudCardActions>

				@if (!string.IsNullOrEmpty(errorMessage))
				{
					<MudAlert Severity="Severity.Error" Dense="true" Elevation="0">@errorMessage</MudAlert>
				}
			</MudForm>
		</MudCard>
	</div>
</div>

@code {
	RegisterModel model = new();
	RegisterModelValidation registerModelValidation = new();

	private string? errorMessage;
	private bool isSubmitting = false;

	private async Task HandleRegister()
	{
		isSubmitting = true;
		errorMessage = null;

		var response = await AuthService.RegisterAsync(model);

		if (response.IsSuccessStatusCode && response.Content is not null)
		{
			Console.WriteLine($"Successful registration! Token: {response.Content.Token.Token}");
			NavigationManager.NavigateTo("/dashboard");
		}
		else
		{
			errorMessage = "Invalid data, please try again.";
		}

		isSubmitting = false;
	}
}